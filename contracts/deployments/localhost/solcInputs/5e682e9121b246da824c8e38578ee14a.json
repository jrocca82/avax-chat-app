{
  "language": "Solidity",
  "sources": {
    "contracts/Database.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\ncontract Database {\n\n    // Stores the default name of an user and her friends info\n    struct user {\n        string name;\n        friend[] friendList;\n    }\n\n    // Each friend is identified by its address and name assigned by the second party\n    struct friend {\n        address pubkey;\n        string name;\n    }\n\n    // message construct stores the single chat message and its metadata\n    struct message {\n        address sender;\n        uint256 timestamp;\n        string msg;\n    }\n\n    // Collection of users registered on the application\n    mapping(address => user) userList;\n    // Collection of messages communicated in a channel between two users\n    mapping(bytes32 => message[]) allMessages; // key : Hash(user1,user2)\n\n    // It checks whether a user(identified by its public key)\n    // has created an account on this application or not\n    function checkUserExists(address pubkey) public view returns(bool) {\n        return bytes(userList[pubkey].name).length > 0;\n    }\n\n    // Registers the caller(msg.sender) to our app with a non-empty username\n    function createAccount(string calldata name) external {\n        require(checkUserExists(msg.sender)==false, \"User already exists!\");\n        require(bytes(name).length>0, \"Username cannot be empty!\"); \n        userList[msg.sender].name = name;\n    }\n\n    // Returns the default name provided by an user\n    function getUsername(address pubkey) external view returns(string memory) {\n        require(checkUserExists(pubkey), \"User is not registered!\");\n        return userList[pubkey].name;\n    }\n\n    // Adds new user as your friend with an associated nickname\n    function addFriend(address friend_key, string calldata name) external {\n        require(checkUserExists(msg.sender), \"Create an account first!\");\n        require(checkUserExists(friend_key), \"User is not registered!\");\n        require(msg.sender!=friend_key, \"Users cannot add themselves as friends!\");\n        require(checkAlreadyFriends(msg.sender,friend_key)==false, \"These users are already friends!\");\n\n        _addFriend(msg.sender, friend_key, name);\n        _addFriend(friend_key, msg.sender, userList[msg.sender].name);\n    }\n\n    // Checks if two users are already friends or not\n    function checkAlreadyFriends(address pubkey1, address pubkey2) internal view returns(bool) {\n\n        if(userList[pubkey1].friendList.length > userList[pubkey2].friendList.length)\n        {\n            address tmp = pubkey1;\n            pubkey1 = pubkey2;\n            pubkey2 = tmp;\n        }\n\n        for(uint i=0; i<userList[pubkey1].friendList.length; ++i)\n        {\n            if(userList[pubkey1].friendList[i].pubkey == pubkey2)\n                return true;\n        }\n        return false;\n    }\n\n    // A helper function to update the friendList\n    function _addFriend(address me, address friend_key, string memory name) internal {\n        friend memory newFriend = friend(friend_key,name);\n        userList[me].friendList.push(newFriend);\n    }\n\n    // Returns list of friends of the sender\n    function getMyFriendList() external view returns(friend[] memory) {\n        return userList[msg.sender].friendList;\n    }\n\n    // Returns a unique code for the channel created between the two users\n    // Hash(key1,key2) where key1 is lexicographically smaller than key2\n    function _getChatCode(address pubkey1, address pubkey2) internal pure returns(bytes32) {\n        if(pubkey1 < pubkey2)\n            return keccak256(abi.encodePacked(pubkey1, pubkey2));\n        else\n            return keccak256(abi.encodePacked(pubkey2, pubkey1));\n    }\n\n    // Sends a new message to a given friend\n    function sendMessage(address friend_key, string calldata _msg) external {\n        require(checkUserExists(msg.sender), \"Create an account first!\");\n        require(checkUserExists(friend_key), \"User is not registered!\");\n        require(checkAlreadyFriends(msg.sender,friend_key), \"You are not friends with the given user\");\n\n        bytes32 chatCode = _getChatCode(msg.sender, friend_key);\n        message memory newMsg = message(msg.sender, block.timestamp, _msg);\n        allMessages[chatCode].push(newMsg);\n    }\n\n    // Returns all the chat messages communicated in a channel\n    function readMessage(address friend_key) external view returns(message[] memory) {\n        bytes32 chatCode = _getChatCode(msg.sender, friend_key);\n        return allMessages[chatCode];\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}